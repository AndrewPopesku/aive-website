name: Deploy Next.js to GitHub Pages

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Detect package manager
      id: detect-package-manager
      working-directory: ./frontend
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          echo "manager=pnpm" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=pnpm" >> $GITHUB_OUTPUT
          exit 0
        elif [ -f "yarn.lock" ]; then
          echo "manager=yarn" >> $GITHUB_OUTPUT
          echo "command=install" >> $GITHUB_OUTPUT
          echo "runner=yarn" >> $GITHUB_OUTPUT
          exit 0
        elif [ -f "package.json" ]; then
          echo "manager=npm" >> $GITHUB_OUTPUT
          echo "command=ci" >> $GITHUB_OUTPUT
          echo "runner=npx --no-install" >> $GITHUB_OUTPUT
          exit 0
        else
          echo "Unable to determine package manager"
          exit 1
        fi
        
    - name: Setup pnpm
      if: steps.detect-package-manager.outputs.manager == 'pnpm'
      uses: pnpm/action-setup@v4
      with:
        version: latest
        
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: "18"
        cache: ${{ steps.detect-package-manager.outputs.manager }}
        cache-dependency-path: |
          frontend/package-lock.json
          frontend/yarn.lock
          frontend/pnpm-lock.yaml
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: |
          frontend/.next/cache
        # Generate a new cache whenever packages or source files change.
        key: ${{ runner.os }}-nextjs-${{ hashFiles('frontend/**/package-lock.json', 'frontend/**/yarn.lock', 'frontend/**/pnpm-lock.yaml') }}-${{ hashFiles('frontend/**.[jt]s', 'frontend/**.[jt]sx') }}
        # If source files changed but packages didn't, rebuild from a prior cache.
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('frontend/**/package-lock.json', 'frontend/**/yarn.lock', 'frontend/**/pnpm-lock.yaml') }}-
          
    - name: Install dependencies
      run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      working-directory: ./frontend
      
    - name: Build with Next.js
      run: ${{ steps.detect-package-manager.outputs.runner }} next build
      working-directory: ./frontend
      env:
        NODE_ENV: production
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./frontend/out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4