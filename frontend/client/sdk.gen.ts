// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostErrors, CreateProjectApiV1ProjectsPostResponses, DeleteProjectApiV1ProjectsProjectIdDeleteData, DeleteProjectApiV1ProjectsProjectIdDeleteErrors, DeleteProjectApiV1ProjectsProjectIdDeleteResponses, GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostData, GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostErrors, GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostResponses, GetAllProjectsApiV1ProjectsGetData, GetAllProjectsApiV1ProjectsGetErrors, GetAllProjectsApiV1ProjectsGetResponses, GetProjectDetailsApiV1ProjectsProjectIdGetData, GetProjectDetailsApiV1ProjectsProjectIdGetErrors, GetProjectDetailsApiV1ProjectsProjectIdGetResponses, GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetData, GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetErrors, GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetResponses, GetProjectRenderTasksApiV1RenderProjectIdTasksGetData, GetProjectRenderTasksApiV1RenderProjectIdTasksGetErrors, GetProjectRenderTasksApiV1RenderProjectIdTasksGetResponses, GetRenderStatusApiV1RenderStatusTaskIdGetData, GetRenderStatusApiV1RenderStatusTaskIdGetErrors, GetRenderStatusApiV1RenderStatusTaskIdGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, OptionsHandlerFullPathOptionsData, OptionsHandlerFullPathOptionsErrors, OptionsHandlerFullPathOptionsResponses, PatchProjectApiV1ProjectsProjectIdPatchData, PatchProjectApiV1ProjectsProjectIdPatchErrors, PatchProjectApiV1ProjectsProjectIdPatchResponses, RenderProjectApiV1ProjectsProjectIdRenderPostData, RenderProjectApiV1ProjectsProjectIdRenderPostErrors, RenderProjectApiV1ProjectsProjectIdRenderPostResponses, RenderProjectApiV1RenderProjectIdRenderPostData, RenderProjectApiV1RenderProjectIdRenderPostErrors, RenderProjectApiV1RenderProjectIdRenderPostResponses, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostData, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostErrors, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostResponses, UpdateProjectApiV1ProjectsProjectIdPutData, UpdateProjectApiV1ProjectsProjectIdPutErrors, UpdateProjectApiV1ProjectsProjectIdPutResponses, UpdateRenderStatusApiV1RenderStatusTaskIdPutData, UpdateRenderStatusApiV1RenderStatusTaskIdPutErrors, UpdateRenderStatusApiV1RenderStatusTaskIdPutResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Options Handler
 * Handle CORS preflight requests.
 */
export const optionsHandlerFullPathOptions = <ThrowOnError extends boolean = false>(options: Options<OptionsHandlerFullPathOptionsData, ThrowOnError>) => {
    return (options.client ?? client).options<OptionsHandlerFullPathOptionsResponses, OptionsHandlerFullPathOptionsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/{full_path}',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};

/**
 * Get All Projects
 * Get a list of all projects.
 */
export const getAllProjectsApiV1ProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsApiV1ProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllProjectsApiV1ProjectsGetResponses, GetAllProjectsApiV1ProjectsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/',
        ...options
    });
};

/**
 * Create Project
 * Create a new project with audio file upload, transcription, and footage recommendations.
 */
export const createProjectApiV1ProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateProjectApiV1ProjectsPostResponses, CreateProjectApiV1ProjectsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Project
 * Delete a project by ID.
 */
export const deleteProjectApiV1ProjectsProjectIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectApiV1ProjectsProjectIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteProjectApiV1ProjectsProjectIdDeleteResponses, DeleteProjectApiV1ProjectsProjectIdDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Get Project Details
 * Get details for a specific project.
 */
export const getProjectDetailsApiV1ProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectDetailsApiV1ProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectDetailsApiV1ProjectsProjectIdGetResponses, GetProjectDetailsApiV1ProjectsProjectIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Patch Project
 * Partially update a project by ID.
 */
export const patchProjectApiV1ProjectsProjectIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchProjectApiV1ProjectsProjectIdPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchProjectApiV1ProjectsProjectIdPatchResponses, PatchProjectApiV1ProjectsProjectIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Project
 * Update a project by ID.
 */
export const updateProjectApiV1ProjectsProjectIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectApiV1ProjectsProjectIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateProjectApiV1ProjectsProjectIdPutResponses, UpdateProjectApiV1ProjectsProjectIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit Footage Choices
 * Submit footage choices for sentences and get music recommendations.
 */
export const submitFootageChoicesApiV1ProjectsProjectIdFootagePost = <ThrowOnError extends boolean = false>(options: Options<SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostData, ThrowOnError>) => {
    return (options.client ?? client).post<SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostResponses, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}/footage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Render Project
 * Start rendering a video for a project.
 */
export const renderProjectApiV1ProjectsProjectIdRenderPost = <ThrowOnError extends boolean = false>(options: Options<RenderProjectApiV1ProjectsProjectIdRenderPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RenderProjectApiV1ProjectsProjectIdRenderPostResponses, RenderProjectApiV1ProjectsProjectIdRenderPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}/render',
        ...options
    });
};

/**
 * Get Project Render Status
 * Get the status of a render task (project-scoped route).
 */
export const getProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetResponses, GetProjectRenderStatusApiV1ProjectsRenderStatusTaskIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/render/status/{task_id}',
        ...options
    });
};

/**
 * Generate Title For Project
 * Generate an AI-powered title for an existing project based on its content.
 */
export const generateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePost = <ThrowOnError extends boolean = false>(options: Options<GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostResponses, GenerateTitleForProjectApiV1ProjectsProjectIdGenerateTitlePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}/generate-title',
        ...options
    });
};

/**
 * Render Project
 * Start rendering a video for a project.
 */
export const renderProjectApiV1RenderProjectIdRenderPost = <ThrowOnError extends boolean = false>(options: Options<RenderProjectApiV1RenderProjectIdRenderPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RenderProjectApiV1RenderProjectIdRenderPostResponses, RenderProjectApiV1RenderProjectIdRenderPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/render/{project_id}/render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Render Status
 * Get the status of a render task.
 */
export const getRenderStatusApiV1RenderStatusTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRenderStatusApiV1RenderStatusTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRenderStatusApiV1RenderStatusTaskIdGetResponses, GetRenderStatusApiV1RenderStatusTaskIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/render/status/{task_id}',
        ...options
    });
};

/**
 * Update Render Status
 * Update render task status (internal endpoint).
 */
export const updateRenderStatusApiV1RenderStatusTaskIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateRenderStatusApiV1RenderStatusTaskIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateRenderStatusApiV1RenderStatusTaskIdPutResponses, UpdateRenderStatusApiV1RenderStatusTaskIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/render/status/{task_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Project Render Tasks
 * Get all render tasks for a project.
 */
export const getProjectRenderTasksApiV1RenderProjectIdTasksGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectRenderTasksApiV1RenderProjectIdTasksGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProjectRenderTasksApiV1RenderProjectIdTasksGetResponses, GetProjectRenderTasksApiV1RenderProjectIdTasksGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/render/{project_id}/tasks',
        ...options
    });
};
