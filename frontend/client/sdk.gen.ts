// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { OptionsHandlerFullPathOptionsData, OptionsHandlerFullPathOptionsResponses, OptionsHandlerFullPathOptionsErrors, GetAllProjectsApiV1ProjectsGetData, GetAllProjectsApiV1ProjectsGetResponses, GetAllProjectsApiV1ProjectsGetErrors, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostResponses, CreateProjectApiV1ProjectsPostErrors, DeleteProjectByIdApiV1ProjectsProjectIdDeleteData, DeleteProjectByIdApiV1ProjectsProjectIdDeleteResponses, DeleteProjectByIdApiV1ProjectsProjectIdDeleteErrors, GetProjectDetailsApiV1ProjectsProjectIdGetData, GetProjectDetailsApiV1ProjectsProjectIdGetResponses, GetProjectDetailsApiV1ProjectsProjectIdGetErrors, PatchProjectApiV1ProjectsProjectIdPatchData, PatchProjectApiV1ProjectsProjectIdPatchResponses, PatchProjectApiV1ProjectsProjectIdPatchErrors, UpdateProjectByIdApiV1ProjectsProjectIdPutData, UpdateProjectByIdApiV1ProjectsProjectIdPutResponses, UpdateProjectByIdApiV1ProjectsProjectIdPutErrors, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostData, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostResponses, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostErrors, RenderProjectApiV1ProjectsProjectIdRenderPostData, RenderProjectApiV1ProjectsProjectIdRenderPostResponses, RenderProjectApiV1ProjectsProjectIdRenderPostErrors, GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetData, GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetResponses, GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Options Handler
 */
export const optionsHandlerFullPathOptions = <ThrowOnError extends boolean = false>(options: Options<OptionsHandlerFullPathOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).options<OptionsHandlerFullPathOptionsResponses, OptionsHandlerFullPathOptionsErrors, ThrowOnError>({
        responseType: 'json',
        url: '/{full_path}',
        ...options
    });
};

/**
 * Get All Projects
 * Get a list of all projects
 */
export const getAllProjectsApiV1ProjectsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllProjectsApiV1ProjectsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllProjectsApiV1ProjectsGetResponses, GetAllProjectsApiV1ProjectsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/',
        ...options
    });
};

/**
 * Create Project
 * Step A: Create a new project with audio file, transcribe it, and get footage recommendations.
 */
export const createProjectApiV1ProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateProjectApiV1ProjectsPostResponses, CreateProjectApiV1ProjectsPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Delete Project By Id
 * Delete a project by ID
 */
export const deleteProjectByIdApiV1ProjectsProjectIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProjectByIdApiV1ProjectsProjectIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProjectByIdApiV1ProjectsProjectIdDeleteResponses, DeleteProjectByIdApiV1ProjectsProjectIdDeleteErrors, ThrowOnError>({
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Get Project Details
 * Get details for a specific project
 */
export const getProjectDetailsApiV1ProjectsProjectIdGet = <ThrowOnError extends boolean = false>(options: Options<GetProjectDetailsApiV1ProjectsProjectIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProjectDetailsApiV1ProjectsProjectIdGetResponses, GetProjectDetailsApiV1ProjectsProjectIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options
    });
};

/**
 * Patch Project
 * Partially update a project by ID
 */
export const patchProjectApiV1ProjectsProjectIdPatch = <ThrowOnError extends boolean = false>(options: Options<PatchProjectApiV1ProjectsProjectIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchProjectApiV1ProjectsProjectIdPatchResponses, PatchProjectApiV1ProjectsProjectIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Project By Id
 * Update a project by ID
 */
export const updateProjectByIdApiV1ProjectsProjectIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateProjectByIdApiV1ProjectsProjectIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateProjectByIdApiV1ProjectsProjectIdPutResponses, UpdateProjectByIdApiV1ProjectsProjectIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Submit Footage Choices
 * Step B: Submit footage choices for sentences and get music recommendations.
 */
export const submitFootageChoicesApiV1ProjectsProjectIdFootagePost = <ThrowOnError extends boolean = false>(options: Options<SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostResponses, SubmitFootageChoicesApiV1ProjectsProjectIdFootagePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}/footage',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Render Project
 * Step C: Render the final video with selected footage and music.
 */
export const renderProjectApiV1ProjectsProjectIdRenderPost = <ThrowOnError extends boolean = false>(options: Options<RenderProjectApiV1ProjectsProjectIdRenderPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RenderProjectApiV1ProjectsProjectIdRenderPostResponses, RenderProjectApiV1ProjectsProjectIdRenderPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/{project_id}/render',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Render Status
 * Get the status of a render task.
 */
export const getRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetResponses, GetRenderStatusApiV1ProjectsRenderStatusRenderTaskIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/api/v1/projects/render/status/{render_task_id}',
        ...options
    });
};